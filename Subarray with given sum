//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends

class Solution
{
    public:
    //Function to find a continuous sub-array which adds up to a given number.
   vector<int> subarraySum(vector<int> arr, int n, long long s) {
    vector<int> res;
    int i = 0;
    long long sum = arr[0];

    if (sum == s) {
        res.push_back(i + 1);
        res.push_back(i + 1);
    }

    for (int j = 1; j < n; j++) {
        sum += arr[j];

        if (sum == s) {
            res.push_back(i + 1);
            res.push_back(j + 1);
            break;
        } else if (sum > s) {
            bool flag = false;
            while (i < j && sum > s) {
                sum -= arr[i++];
                if (sum == s) {
                    res.push_back(i + 1);
                    res.push_back(j + 1);
                    flag = true;
                    break;
                }
            }
            if (flag) break;
        }
    }

    if (res.size() == 0) return {-1};
    return res;
}

};


//{ Driver Code Starts.

int main()
 {
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        long long s;
        cin>>n>>s;
        vector<int>arr(n);
        // int arr[n];
        const int mx = 1e9;
        for(int i=0;i<n;i++)
        {
            cin>>arr[i];
        }
        Solution ob;
        vector<int>res;
        res = ob.subarraySum(arr, n, s);
        
        for(int i = 0;i<res.size();i++)
            cout<<res[i]<<" ";
        cout<<endl;
        
    }
	return 0;
}
// } Driver Code Ends
